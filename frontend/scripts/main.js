const API_BASE_URL = 'http://localhost:8081/api/v1';

const searchForm = document.getElementById('searchForm');
const orderUIDInput = document.getElementById('orderUID');
const searchBtn = document.querySelector('.search-btn');
const resultsSection = document.getElementById('resultsSection');
const errorSection = document.getElementById('errorSection');
const errorMessage = document.getElementById('errorMessage');
const orderDetails = document.getElementById('orderDetails');
const loader = document.getElementById('loader');
const modal = document.getElementById('modal');
const modalTitle = document.getElementById('modalTitle');
const modalBody = document.getElementById('modalBody');

document.addEventListener('DOMContentLoaded', function () {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã
    searchForm.addEventListener('submit', handleSearch);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Enter –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
    orderUIDInput.addEventListener('keypress', function (e) {
        if (e.key === 'Enter') {
            e.preventDefault();
            handleSearch(e);
        }
    });

    // –ê–≤—Ç–æ—Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
    orderUIDInput.focus();

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
    const randomOrderBtn = document.getElementById('randomOrderBtn');
    if (randomOrderBtn) {
        randomOrderBtn.addEventListener('click', generateRandomOrder);
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–∞
async function handleSearch(e) {
    e.preventDefault();

    const orderUID = orderUIDInput.value.trim();
    if (!orderUID) {
        showError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID –∑–∞–∫–∞–∑–∞');
        return;
    }

    await searchOrder(orderUID);
}

// –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ API
async function searchOrder(orderUID) {
    try {
        setLoading(true);
        hideError();
        hideResults();

        console.log(`Searching for order: ${orderUID}`);

        const response = await fetch(`${API_BASE_URL}/orders/${encodeURIComponent(orderUID)}`);
        const data = await response.json();

        if (data.success && data.data) {
            displayOrder(data.data);
            console.log('Order found:', data.data);
        } else {
            showError(data.error || '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
    } catch (error) {
        console.error('Search error:', error);
        showError(`–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${error.message}. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ backend —Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8080.`);
    } finally {
        setLoading(false);
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ
function displayOrder(order) {
    const orderInfo = document.createElement('div');
    orderInfo.className = 'order-info fade-in';

    orderInfo.innerHTML = `
        <!-- –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ -->
        <div class="order-section">
            <h3>üì¶ –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
            <div class="order-grid">
                <div class="order-field">
                    <span class="field-label">ID –∑–∞–∫–∞–∑–∞:</span>
                    <span class="field-value">${order.order_uid}</span>
                </div>
                <div class="order-field">
                    <span class="field-label">–¢—Ä–µ–∫-–Ω–æ–º–µ—Ä:</span>
                    <span class="field-value">${order.track_number}</span>
                </div>
                <div class="order-field">
                    <span class="field-label">–ö–ª–∏–µ–Ω—Ç:</span>
                    <span class="field-value">${order.customer_id}</span>
                </div>
                <div class="order-field">
                    <span class="field-label">–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</span>
                    <span class="field-value">${formatDate(order.date_created)}</span>
                </div>
                <div class="order-field">
                    <span class="field-label">–°–ª—É–∂–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:</span>
                    <span class="field-value">${order.delivery_service}</span>
                </div>
                <div class="order-field">
                    <span class="field-label">–õ–æ–∫–∞–ª—å:</span>
                    <span class="field-value">${order.locale || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}</span>
                </div>
            </div>
        </div>

        <!-- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ -->
        ${order.delivery ? `
        <div class="order-section">
            <h3>üöö –î–æ—Å—Ç–∞–≤–∫–∞</h3>
            <div class="order-grid">
                <div class="order-field">
                    <span class="field-label">–ü–æ–ª—É—á–∞—Ç–µ–ª—å:</span>
                    <span class="field-value">${order.delivery.name}</span>
                </div>
                <div class="order-field">
                    <span class="field-label">–¢–µ–ª–µ—Ñ–æ–Ω:</span>
                    <span class="field-value">${order.delivery.phone}</span>
                </div>
                <div class="order-field">
                    <span class="field-label">Email:</span>
                    <span class="field-value">${order.delivery.email}</span>
                </div>
                <div class="order-field">
                    <span class="field-label">–ê–¥—Ä–µ—Å:</span>
                    <span class="field-value">${order.delivery.address}</span>
                </div>
                <div class="order-field">
                    <span class="field-label">–ì–æ—Ä–æ–¥:</span>
                    <span class="field-value">${order.delivery.city}</span>
                </div>
                <div class="order-field">
                    <span class="field-label">–†–µ–≥–∏–æ–Ω:</span>
                    <span class="field-value">${order.delivery.region}</span>
                </div>
                <div class="order-field">
                    <span class="field-label">–ò–Ω–¥–µ–∫—Å:</span>
                    <span class="field-value">${order.delivery.zip}</span>
                </div>
            </div>
        </div>
        ` : ''}

        <!-- –ü–ª–∞—Ç–µ–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è -->
        ${order.payment ? `
        <div class="order-section">
            <h3>üí≥ –ü–ª–∞—Ç–µ–∂</h3>
            <div class="order-grid">
                <div class="order-field">
                    <span class="field-label">–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞:</span>
                    <span class="field-value">${formatCurrency(order.payment.amount, order.payment.currency)}</span>
                </div>
                <div class="order-field">
                    <span class="field-label">–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤:</span>
                    <span class="field-value">${formatCurrency(order.payment.goods_total, order.payment.currency)}</span>
                </div>
                <div class="order-field">
                    <span class="field-label">–î–æ—Å—Ç–∞–≤–∫–∞:</span>
                    <span class="field-value">${formatCurrency(order.payment.delivery_cost, order.payment.currency)}</span>
                </div>
                <div class="order-field">
                    <span class="field-label">–ü—Ä–æ–≤–∞–π–¥–µ—Ä:</span>
                    <span class="field-value">${order.payment.provider}</span>
                </div>
                <div class="order-field">
                    <span class="field-label">–ë–∞–Ω–∫:</span>
                    <span class="field-value">${order.payment.bank}</span>
                </div>
                <div class="order-field">
                    <span class="field-label">–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è:</span>
                    <span class="field-value">${order.payment.transaction}</span>
                </div>
                <div class="order-field">
                    <span class="field-label">–î–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞:</span>
                    <span class="field-value">${formatTimestamp(order.payment.payment_dt)}</span>
                </div>
            </div>
        </div>
        ` : ''}

        <!-- –¢–æ–≤–∞—Ä—ã -->
        ${order.items && order.items.length > 0 ? `
        <div class="order-section">
            <h3>üõçÔ∏è –¢–æ–≤–∞—Ä—ã (${order.items.length})</h3>
            <div class="items-list">
                ${order.items.map(item => `
                    <div class="item-card">
                        <div class="item-header">
                            <div class="item-name">${item.name}</div>
                            <div class="item-price">${formatCurrency(item.total_price, order.payment?.currency || 'USD')}</div>
                        </div>
                        <div class="item-details">
                            <div><strong>–ë—Ä–µ–Ω–¥:</strong> ${item.brand}</div>
                            <div><strong>–†–∞–∑–º–µ—Ä:</strong> ${item.size || '–Ω–µ —É–∫–∞–∑–∞–Ω'}</div>
                            <div><strong>–ê—Ä—Ç–∏–∫—É–ª:</strong> ${item.nm_id}</div>
                            <div><strong>–¶–µ–Ω–∞:</strong> ${formatCurrency(item.price, order.payment?.currency || 'USD')}</div>
                            ${item.sale > 0 ? `<div><strong>–°–∫–∏–¥–∫–∞:</strong> ${item.sale}%</div>` : ''}
                            <div><strong>–°—Ç–∞—Ç—É—Å:</strong> <span class="status-badge ${getStatusClass(item.status)}">${getStatusText(item.status)}</span></div>
                        </div>
                    </div>
                `).join('')}
            </div>
        </div>
        ` : ''}
    `;

    orderDetails.innerHTML = '';
    orderDetails.appendChild(orderInfo);
    showResults();
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function formatDate(dateString) {
    try {
        const date = new Date(dateString);
        return date.toLocaleString('ru-RU', {
            year: 'numeric',
            month: 'long',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        });
    } catch {
        return dateString;
    }
}

function formatTimestamp(timestamp) {
    try {
        const date = new Date(timestamp * 1000);
        return date.toLocaleString('ru-RU', {
            year: 'numeric',
            month: 'long',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        });
    } catch {
        return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
}

function formatCurrency(amount, currency = 'USD') {
    if (typeof amount !== 'number') return amount;

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ü–µ–Ω—Ç—ã –≤ –æ—Å–Ω–æ–≤–Ω—É—é –≤–∞–ª—é—Ç—É
    const value = amount / 100;

    const formatter = new Intl.NumberFormat('ru-RU', {
        style: 'currency',
        currency: currency,
        minimumFractionDigits: 2
    });

    return formatter.format(value);
}

function getStatusClass(status) {
    if (status >= 200 && status < 300) return 'status-success';
    if (status >= 100 && status < 200) return 'status-warning';
    return 'status-error';
}

function getStatusText(status) {
    const statusMap = {
        100: '–û–±—Ä–∞–±–æ—Ç–∫–∞',
        200: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
        202: '–ü—Ä–∏–Ω—è—Ç',
        300: '–î–æ—Å—Ç–∞–≤–ª–µ–Ω',
        400: '–û—à–∏–±–∫–∞',
        500: '–û—Ç–º–µ–Ω–µ–Ω'
    };
    return statusMap[status] || `–°—Ç–∞—Ç—É—Å ${status}`;
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º UI
function setLoading(loading) {
    if (loading) {
        searchBtn.classList.add('loading');
        searchBtn.disabled = true;
    } else {
        searchBtn.classList.remove('loading');
        searchBtn.disabled = false;
    }
}

function showResults() {
    resultsSection.style.display = 'block';
    resultsSection.scrollIntoView({ behavior: 'smooth', block: 'start' });
}

function hideResults() {
    resultsSection.style.display = 'none';
}

function showError(message) {
    errorMessage.textContent = message;
    errorSection.style.display = 'block';
    errorSection.scrollIntoView({ behavior: 'smooth', block: 'start' });
}

function hideError() {
    errorSection.style.display = 'none';
}

function clearError() {
    hideError();
    orderUIDInput.focus();
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async function getRandomOrder() {
    // –°–ø–∏—Å–æ–∫ –ø—Ä–∏–º–µ—Ä–æ–≤ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    const exampleOrders = [
        'b563feb7b2b84b6test',
        'sample_order_001',
        'demo_order_123',
        'test_order_456'
    ];

    const randomOrder = exampleOrders[Math.floor(Math.random() * exampleOrders.length)];
    orderUIDInput.value = randomOrder;
    await searchOrder(randomOrder);
}

async function getCacheStats() {
    try {
        const response = await fetch(`${API_BASE_URL}/cache/stats`);
        const data = await response.json();

        if (data.success) {
            showModal('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–∞', `
                <div class="order-grid">
                    <div class="order-field">
                        <span class="field-label">–†–∞–∑–º–µ—Ä –∫–µ—à–∞:</span>
                        <span class="field-value">${data.data.size}</span>
                    </div>
                    <div class="order-field">
                        <span class="field-label">–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä:</span>
                        <span class="field-value">${data.data.capacity}</span>
                    </div>
                    <div class="order-field">
                        <span class="field-label">–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å:</span>
                        <span class="field-value">${Math.round((data.data.size / data.data.capacity) * 100)}%</span>
                    </div>
                </div>
            `);
        } else {
            showError(data.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à–∞');
        }
    } catch (error) {
        showError(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${error.message}`);
    }
}

async function getAllOrders() {
    try {
        const response = await fetch(`${API_BASE_URL}/orders?limit=10`);
        const data = await response.json();

        if (data.success && data.data.orders) {
            const ordersList = data.data.orders.map(order => `
                <div class="order-field" style="cursor: pointer;" onclick="loadOrder('${order.order_uid}')">
                    <span class="field-label">${order.order_uid}</span>
                    <span class="field-value">${formatDate(order.date_created)}</span>
                </div>
            `).join('');

            showModal(`–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã (${data.data.count})`, `
                <div style="max-height: 400px; overflow-y: auto;">
                    ${ordersList || '<p>–ó–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>'}
                </div>
                <p style="margin-top: 16px; color: #6b7280; font-size: 0.9rem;">
                    –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–∞–∫–∞–∑, —á—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ–≥–æ
                </p>
            `);
        } else {
            showError(data.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤');
        }
    } catch (error) {
        showError(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤: ${error.message}`);
    }
}

async function healthCheck() {
    try {
        const response = await fetch(`${API_BASE_URL}/health`);
        const data = await response.json();

        if (data.success) {
            const status = data.data;
            showModal('–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞', `
                <div class="order-grid">
                    <div class="order-field">
                        <span class="field-label">–°—Ç–∞—Ç—É—Å:</span>
                        <span class="field-value status-badge status-success">${status.status}</span>
                    </div>
                    <div class="order-field">
                        <span class="field-label">–ö–µ—à:</span>
                        <span class="field-value">${status.cache.size}/${status.cache.capacity}</span>
                    </div>
                    <div class="order-field">
                        <span class="field-label">–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏:</span>
                        <span class="field-value">${new Date().toLocaleString('ru-RU')}</span>
                    </div>
                </div>
            `);
        } else {
            showError('–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        }
    } catch (error) {
        showError(`–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error.message}`);
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
async function loadOrder(orderUID) {
    closeModal();
    orderUIDInput.value = orderUID;
    await searchOrder(orderUID);
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω—ã–º –æ–∫–Ω–æ–º
function showModal(title, content) {
    modalTitle.textContent = title;
    modalBody.innerHTML = content;
    modal.style.display = 'flex';
}

function closeModal() {
    modal.style.display = 'none';
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –µ–≥–æ
window.onclick = function (event) {
    if (event.target === modal) {
        closeModal();
    }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
async function generateRandomOrder(event) {
    const randomBtn = event ? event.target : document.getElementById('randomOrderBtn');

    if (!randomBtn) {
        return;
    }

    const originalText = randomBtn.textContent;

    try {
        // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –∏ –º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç
        randomBtn.disabled = true;
        randomBtn.style.backgroundColor = '#9ca3af';
        randomBtn.style.cursor = 'not-allowed';
        randomBtn.textContent = '–°–æ–∑–¥–∞–µ—Ç—Å—è...';

        hideError();

        const response = await fetch(`${API_BASE_URL}/orders/random`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
        });

        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }

        const result = await response.json();

        if (result.success && result.data) {
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑
            orderUIDInput.value = result.data.order_uid;
            displayOrder(result.data);
            showMessage(`–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω: ${result.data.order_uid}`, 'success');
        } else {
            showError(result.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞');
        }
    } catch (error) {
        showMessage(`–û—à–∏–±–∫–∞: ${error.message}`, 'error');
    } finally {
        // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
        randomBtn.disabled = false;
        randomBtn.style.backgroundColor = '';
        randomBtn.style.cursor = '';
        randomBtn.textContent = originalText;
    }
}

// –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showMessage(message, type = 'info') {
    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.textContent = message;

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 15px 20px;
        border-radius: 8px;
        color: white;
        font-weight: 500;
        z-index: 1000;
        opacity: 0;
        transform: translateX(100%);
        transition: all 0.3s ease;
    `;

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    switch (type) {
        case 'success':
            notification.style.backgroundColor = '#10b981';
            break;
        case 'error':
            notification.style.backgroundColor = '#ef4444';
            break;
        default:
            notification.style.backgroundColor = '#3b82f6';
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ DOM
    document.body.appendChild(notification);

    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    setTimeout(() => {
        notification.style.opacity = '1';
        notification.style.transform = 'translateX(0)';
    }, 100);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        notification.style.opacity = '0';
        notification.style.transform = 'translateX(100%)';
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 300);
    }, 3000);
}
