package handlers

import (
	"encoding/json"
	"net/http"
	"order-service/internal/cache"
	"order-service/internal/database"
	"strconv"
	"strings"
	"time"

	"github.com/gorilla/mux"
	"github.com/sirupsen/logrus"
)

type HTTPHandler struct {
	db     database.OrderRepository
	cache  cache.OrderCache
	logger *logrus.Logger
}

type APIResponse struct {
	Success bool        `json:"success"`
	Data    interface{} `json:"data,omitempty"`
	Error   string      `json:"error,omitempty"`
}

// NewHTTPHandler —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π HTTP handler
func NewHTTPHandler(db database.OrderRepository, cache cache.OrderCache, logger *logrus.Logger) *HTTPHandler {
	return &HTTPHandler{
		db:     db,
		cache:  cache,
		logger: logger,
	}
}

// SetupRoutes –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –º–∞—Ä—à—Ä—É—Ç—ã
func (h *HTTPHandler) SetupRoutes() *mux.Router {
	r := mux.NewRouter()

	// API –º–∞—Ä—à—Ä—É—Ç—ã
	api := r.PathPrefix("/api/v1").Subrouter()
	api.HandleFunc("/orders/{order_uid}", h.GetOrder).Methods("GET")
	api.HandleFunc("/orders", h.GetAllOrders).Methods("GET")
	api.HandleFunc("/cache/stats", h.GetCacheStats).Methods("GET")
	api.HandleFunc("/health", h.HealthCheck).Methods("GET")

	// –ü—Ä–æ—Å—Ç–∞—è –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± API
	r.HandleFunc("/", h.APIInfoPage).Methods("GET")

	// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
	r.Use(h.loggingMiddleware)
	r.Use(h.corsMiddleware)

	return r
}

// GetOrder –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–∫–∞–∑ –ø–æ UID (—Å–Ω–∞—á–∞–ª–∞ –∏–∑ –∫–µ—à–∞, –∑–∞—Ç–µ–º –∏–∑ –ë–î)
func (h *HTTPHandler) GetOrder(w http.ResponseWriter, r *http.Request) {
	vars := mux.Vars(r)
	orderUID := vars["order_uid"]

	if strings.TrimSpace(orderUID) == "" {
		h.writeErrorResponse(w, http.StatusBadRequest, "order_uid is required")
		return
	}

	h.logger.WithField("order_uid", orderUID).Debug("Getting order")

	// –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
	if order, found := h.cache.Get(orderUID); found {
		h.logger.WithField("order_uid", orderUID).Debug("Order found in cache")
		h.writeSuccessResponse(w, order)
		return
	}

	// –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–µ—à–µ, –∏—â–µ–º –≤ –ë–î
	order, err := h.db.GetOrderByUID(orderUID)
	if err != nil {
		h.logger.WithError(err).WithField("order_uid", orderUID).Error("Failed to get order from database")
		h.writeErrorResponse(w, http.StatusInternalServerError, "Internal server error")
		return
	}

	if order == nil {
		h.logger.WithField("order_uid", orderUID).Debug("Order not found")
		h.writeErrorResponse(w, http.StatusNotFound, "Order not found")
		return
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑ –≤ –∫–µ—à
	h.cache.Set(orderUID, order)
	h.logger.WithField("order_uid", orderUID).Debug("Order found in database and added to cache")

	h.writeSuccessResponse(w, order)
}

// GetAllOrders –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
func (h *HTTPHandler) GetAllOrders(w http.ResponseWriter, r *http.Request) {
	limitStr := r.URL.Query().Get("limit")
	limit := 50 // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

	if limitStr != "" {
		if parsedLimit, err := strconv.Atoi(limitStr); err == nil && parsedLimit > 0 && parsedLimit <= 1000 {
			limit = parsedLimit
		}
	}

	orders, err := h.db.GetAllOrders(limit)
	if err != nil {
		h.logger.WithError(err).Error("Failed to get orders from database")
		h.writeErrorResponse(w, http.StatusInternalServerError, "Internal server error")
		return
	}

	h.writeSuccessResponse(w, map[string]interface{}{
		"orders": orders,
		"count":  len(orders),
		"limit":  limit,
	})
}

// GetCacheStats –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à–∞
func (h *HTTPHandler) GetCacheStats(w http.ResponseWriter, r *http.Request) {
	stats := h.cache.GetStats()
	h.writeSuccessResponse(w, stats)
}

// HealthCheck –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–∏—Å–∞
func (h *HTTPHandler) HealthCheck(w http.ResponseWriter, r *http.Request) {
	// –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
	_, err := h.db.GetAllOrders(1)
	if err != nil {
		h.writeErrorResponse(w, http.StatusServiceUnavailable, "Database is unavailable")
		return
	}

	h.writeSuccessResponse(w, map[string]interface{}{
		"status":    "ok",
		"timestamp": "2024-01-01T00:00:00Z", // –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å time.Now()
		"cache":     h.cache.GetStats(),
	})
}

// APIInfoPage –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± API
func (h *HTTPHandler) APIInfoPage(w http.ResponseWriter, r *http.Request) {
	tmpl := `
<!DOCTYPE html>
<html>
<head>
    <title>Order Service API</title>
    <meta charset="utf-8">
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
        .container { max-width: 1000px; margin: 0 auto; }
        .card { background: white; padding: 30px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); margin-bottom: 20px; }
        h1 { color: #333; margin-bottom: 10px; }
        .subtitle { color: #666; font-size: 1.1rem; margin-bottom: 30px; }
        .endpoint { background: #f8f9fa; padding: 15px; border-radius: 5px; margin: 10px 0; border-left: 4px solid #007bff; }
        .method { background: #007bff; color: white; padding: 3px 8px; border-radius: 3px; font-size: 0.8rem; margin-right: 10px; }
        .path { font-family: monospace; font-weight: bold; }
        .description { color: #666; margin-top: 5px; }
        .example { background: #e9ecef; padding: 10px; border-radius: 3px; font-family: monospace; margin-top: 5px; }
        .frontend-link { background: #28a745; color: white; padding: 15px 25px; text-decoration: none; border-radius: 5px; display: inline-block; margin: 20px 0; }
        .frontend-link:hover { background: #218838; }
    </style>
</head>
<body>
    <div class="container">
        <div class="card">
            <h1>üöÄ Order Service API</h1>
            <p class="subtitle">RESTful API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–∫–∞–∑–∞–º–∏</p>
            
            <a href="http://localhost:3000" class="frontend-link">üì± –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å</a>
            
            <h2>üì° –î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:</h2>
            
            <div class="endpoint">
                <div><span class="method">GET</span><span class="path">/api/v1/orders/{order_uid}</span></div>
                <div class="description">–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –ø–æ ID</div>
                <div class="example">curl http://localhost:8080/api/v1/orders/b563feb7b2b84b6test</div>
            </div>
            
            <div class="endpoint">
                <div><span class="method">GET</span><span class="path">/api/v1/orders?limit=10</span></div>
                <div class="description">–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º</div>
                <div class="example">curl http://localhost:8080/api/v1/orders?limit=5</div>
            </div>
            
            <div class="endpoint">
                <div><span class="method">GET</span><span class="path">/api/v1/cache/stats</span></div>
                <div class="description">–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à–∞</div>
                <div class="example">curl http://localhost:8080/api/v1/cache/stats</div>
            </div>
            
            <div class="endpoint">
                <div><span class="method">GET</span><span class="path">/api/v1/health</span></div>
                <div class="description">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞</div>
                <div class="example">curl http://localhost:8080/api/v1/health</div>
            </div>
            
            <h2>üìÑ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:</h2>
            <ul>
                <li>–í—Å–µ –æ—Ç–≤–µ—Ç—ã –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ</li>
                <li>–£—Å–ø–µ—à–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã: <code>{"success": true, "data": {...}}</code></li>
                <li>–û—à–∏–±–∫–∏: <code>{"success": false, "error": "–æ–ø–∏—Å–∞–Ω–∏–µ"}</code></li>
                <li>CORS –≤–∫–ª—é—á–µ–Ω –¥–ª—è –≤—Å–µ—Ö origins</li>
                <li>–ö–µ—à —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –≤ –ø–∞–º—è—Ç–∏, –∑–∞—Ç–µ–º –≤ –ë–î</li>
            </ul>
            
            <h2>üõ†Ô∏è –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:</h2>
            <ul>
                <li><strong>Backend:</strong> Go, Gorilla Mux, PostgreSQL, Kafka</li>
                <li><strong>Frontend:</strong> HTML, CSS, JavaScript (–æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä)</li>
                <li><strong>–ö–µ—à:</strong> In-memory LRU –∫–µ—à</li>
                <li><strong>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:</strong> PostgreSQL —Å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π —Å—Ö–µ–º–æ–π</li>
            </ul>
        </div>
    </div>
</body>
</html>
`
	w.Header().Set("Content-Type", "text/html; charset=utf-8")
	w.Write([]byte(tmpl))
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
func (h *HTTPHandler) writeSuccessResponse(w http.ResponseWriter, data interface{}) {
	response := APIResponse{
		Success: true,
		Data:    data,
	}
	h.writeJSONResponse(w, http.StatusOK, response)
}

func (h *HTTPHandler) writeErrorResponse(w http.ResponseWriter, statusCode int, message string) {
	response := APIResponse{
		Success: false,
		Error:   message,
	}
	h.writeJSONResponse(w, statusCode, response)
}

func (h *HTTPHandler) writeJSONResponse(w http.ResponseWriter, statusCode int, data interface{}) {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(statusCode)
	json.NewEncoder(w).Encode(data)
}

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
func (h *HTTPHandler) loggingMiddleware(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		start := time.Now()
		
		// –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ —Å—Ç–∞—Ç—É—Å –∫–æ–¥–∞
		wrapper := &responseWrapper{ResponseWriter: w, statusCode: http.StatusOK}
		
		next.ServeHTTP(wrapper, r)
		
		h.logger.WithFields(logrus.Fields{
			"method":      r.Method,
			"path":        r.URL.Path,
			"status_code": wrapper.statusCode,
			"duration":    time.Since(start),
			"user_agent":  r.UserAgent(),
			"remote_addr": r.RemoteAddr,
		}).Info("HTTP request")
	})
}

// Middleware –¥–ª—è CORS
func (h *HTTPHandler) corsMiddleware(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Access-Control-Allow-Origin", "*")
		w.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS")
		w.Header().Set("Access-Control-Allow-Headers", "Content-Type, Authorization")
		
		if r.Method == "OPTIONS" {
			w.WriteHeader(http.StatusOK)
			return
		}
		
		next.ServeHTTP(w, r)
	})
}

type responseWrapper struct {
	http.ResponseWriter
	statusCode int
}

func (rw *responseWrapper) WriteHeader(code int) {
	rw.statusCode = code
	rw.ResponseWriter.WriteHeader(code)
}
